[[questions]]
type = "MultipleChoice"
prompt.prompt = "Given a future `f`, which of the following best describes how `f.await` works?"
prompt.distractors = [
  "It calls `f.poll()` once, which blocks in-place until `f` is ready",
  "It calls `f.poll()` in a loop, exiting if `f` is ready, or immediately polling again if `f` is not ready",
  "It calls `f.push(...)` once, which executes a callback containing the remaining code after `f.await` once `f` is ready"
]
answer.answer = "It calls `f.poll()` in a loop, exiting if `f` is ready, or returning control to the async runtime if `f` is not ready"
context = """
Rust uses a poll-based model for future execution. An await point desugars into a loop which repeatedly calls `.poll()`, 
and cedes control to the async runtime after each unsuccessful poll to allow other async code to run. The runtime can later
"wake up" the `f.await` code to poll `f` again.
"""
id = "c4d90f3c-7286-4272-921c-241b266e9f91"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Imagine Rust did not require that futures were pinned in order to be polled. 
Which of the following async functions could potentially cause undefined behavior if not pinned?
"""
prompt.distractors = [
"""
```rust
async fn example(x: &i32) -> i32 {
    sleep(Duration::from_secs(1)).await;
    *y
}
```
""",
"""
```rust
async fn example(x: Vec<i32>) -> i32 {
    sleep(Duration::from_secs(1)).await;
    x[0]
}
```
""",
"""
```rust
async fn example() -> i32 {
    let x = 0;
    sleep(Duration::from_secs(1)).await;
    x
}
```
""",  
]
answer.answer = """
```rust
async fn example(x: i32) -> i32 {
    let y = &x;
    sleep(Duration::from_secs(1)).await;
    *y
}
```
"""
context = """
The core problem addressed by pinning in self-reference, or a future which contains a pointer to itself. 
This happens when an async block contains a local variable that refers to another local variable in the future.
Here, that would be `y = &x`.
"""
id = "bc8b4acb-d111-4fec-b89a-e5d1bc77c8f2"
